#!/bin/sh
#
# Copyright (C) 2014  Jonas Bernoulli

# This is pretty much just a wrapper around git-filter-branch.

# In particular note that unlike git-filter-emacswiki this always
# rewrites all commits, including those already rewritten during
# earlier runs.  This doesn't matter here, because the history is
# *much* shorter than in the case of the Emacswiki.  Furthermore
# trying to be smart about it would be *very* risky (I have done so
# in the past and it was a disaster) because the history is much
# more *complex* than that of the Emacswiki (it does contain merge
# commits).

# The only interesting thing here is the --commit-filter, which we
# use instead of --prune-empty, which - unlike this filter - does in
# fact *not* prune all empty commits (it fails to prune the initial
# commit and certain merge commits).

USAGE="package"

OPTIONS_SPEC=
. git-sh-setup

if [ "$(is_bare_repository)" = false ]; then
	require_clean_work_tree 'rewrite branches'
fi

test $# = 1 || usage
package=$1

git branch -f "directory/$package" &&
git filter-branch -f --subdirectory-filter "packages/$package" --commit-filter '
test $# = 1 && test -z "$(git ls-tree $1)" && skip_commit "$1" && exit
args="$@"
tree="$1"
shift
while test -n "$1"
do
	shift
	test "$tree" = $(git rev-parse "$1^{tree}") && map "$1" && exit
	shift
done
git commit-tree $args' "directory/$package"

# Because that's what git-filter-branch uses.
# Local Variables:
# indent-tabs-mode: t
# End:
