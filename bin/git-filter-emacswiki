#!/bin/sh
#
# Copyright (C) 2014-2020  Jonas Bernoulli
#
# A lot of code comes from git-filter-branch:
# Copyright (C) 2006  Petr Baudis
# Copyright (C) 2007  Johannes Schindelin
# Copyright (C) 2006-2014  Other Git contributors

# The history of the Emacswiki is both huge (>25500 commits) and
# trivial (no merges).  Taking advantage of the latter as we do here,
# (and instead of using git-filter-branch) yields a *massive* speedup.

# Going >850 times (number of packages) through >25500 commits to
# determine whether they touch a particular file and always doing some
# other work which is then discarded for most commits, isn't something
# you want to do every other day.  So we take advantage of the linear
# history and first determine the relevant revs in a much more
# efficient manner, and then only rewrite those.  Determining the new
# revs still takes about twelve seconds per package, so we optionally
# remember which commits we have already considered in previous runs.

USAGE="[--tag] [--notes] [--ignore-notes]
        [--force] [--time] [package [<library>...]]
arguments:
  --tag           Create tags.  Every time a previously unseen \"Version\"
                  header is encountered the respective rev is tagged with
                  the value of that header, provided it looks like a version
                  string.  For libraries by Drew Adams, who insists on doing
                  things differently, append the value of the \"Update #\"
                  header.  Otherwise tags are not sanitized, i.e. they
                  sometimes go down, because authors do crazy stuff.

  --notes         Create notes for each rewritten rev and later use them to
                  speed up determining revs that have not yet been rewritten.

  --ignore-notes  Only meaningful together with --notes.  Do create notes but
                  don't use existing notes to speed up determining new revs.

  --force         Do a full rewrite even if there is nothing new.  Useful
                  to recreate tags and notes (e.g. because Drew, against all
                  odds, has started to use sane version strings).

  --time          Report time spend determining revs to be rewritten

  <package>       The package to be filtered.  This is used as the name of the
                  branch.  Also when first creating that branch and provided
                  <library> is not specified then \"<package>.el\" is used as
                  the library.  When <package> is omitted, then all existing
                  packages (i.e. every branch except \"master\") are updated.

  <library>       The library the package consists of.  Can be used more than
                  once if the package consists of multiple libraries.  When
                  updating a package <library> should be omitted, except in
                  order to add or remove a library.  In which case you likely
                  want to also use --force and carefully review the result.
"

die() {
	echo >&2
	echo "$*" >&2
	exit 1
}

finish_ident() {
	# Ensure non-empty id name.
	echo "case \"\$GIT_$1_NAME\" in \"\") GIT_$1_NAME=\"\${GIT_$1_EMAIL%%@*}\" && export GIT_$1_NAME;; esac"
	# And make sure everything is exported.
	echo "export GIT_$1_NAME"
	echo "export GIT_$1_EMAIL"
	echo "export GIT_$1_DATE"
}

set_ident () {
	parse_ident_from_commit author AUTHOR committer COMMITTER
	finish_ident AUTHOR
	finish_ident COMMITTER
}

OPTIONS_SPEC=
. git-sh-setup

if [ "$(is_bare_repository)" = false ]; then
	require_clean_work_tree 'rewrite branches'
fi

TIME="/usr/bin/time -f %E"

libraries=
package=
ref=
tag=
notes=
discard=
force=
time=
all=
while :
do
	case "$1" in
	--tag)   shift; tag="--tag";;
	--notes) shift; notes="--notes";;
	--ignore-notes) shift; discard="--ignore-notes"; force="--force";;
	--force) shift; force="--force";;
	--time)  shift; time="--time";;
	-*) usage;;
	*)  break;;
	esac
done

if test $# = 0; then
	tempdir=.git-rewrite-batch
else
	tempdir=.git-rewrite
fi
rm -rf "$tempdir"
orig_dir=$(pwd)
mkdir -p "$tempdir/t" &&
tempdir="$(cd "$tempdir"; pwd)" &&
cd "$tempdir/t" &&
workdir="$(pwd)" ||
die ""

trap 'cd "$orig_dir"; rm -rf "$tempdir"' 0

if test $# = 0; then
	git branch | cut -c3- | grep -v -E "^master$" >../packages

	n=$(wc -l <../packages)
	i=0
	updated=0
	uptodate=0
	nonff=0
	error=0
	while read package; do
		i=$(($i+1))
		printf "Rewrite $package ($i/$n)\n"
		cd "$orig_dir"
		git filter-emacswiki $tag $notes $force $discard $time "$package"
		case $? in
		2) uptodate=$(($uptodate+1));;
		0) updated=$(($updated+1)); printf "$package\n" >> $tempdir/exit-updated;;
		3) nonff=$(($nonff+1)); printf "$package\n" >> $tempdir/exit-nonff;;
		*) error=$(($error+1)); printf "$package\n" >> $tempdir/exit-error;;
		esac
	done <../packages

	printf "Summary:\n"
	if test "$updated" -gt 0; then
		printf "%5i/$n updated\n" "$updated"
		sed -e 's/^/  /' $tempdir/exit-updated
	fi
	if test "$nonff" -gt 0; then
		printf "%5i/$n updated resulting in non fast-forward\n" "$nonff"
		sed -e 's/^/  /' $tempdir/exit-nonff
	fi
	if test "$uptodate" -gt 0; then
		printf "%5i/$n already up-to-date\n" "$uptodate"
	fi
	if test "$error" -gt 0; then
		printf "%5i/$n failed with an error\n" "$error"
		sed -e 's/^/  /' $tempdir/exit-error
	fi

	cd "$orig_dir"
	rm -rf "$tempdir"
	trap - 0
	exit 0

else
	package="$1"; shift
	test "$package" = master &&
		die "Disallowed package name: master"
	ref=refs/heads/"$package"

	if test $# = 0; then
		if git rev-parse --verify "$ref" > /dev/null 2>&1; then
			git log --pretty=format: --name-only \
				--diff-filter=A "$ref" |
				sed '/^$/d' | sort -u >../libraries
		else
			printf "$package.el\n" >../libraries
		fi
	else
		for lib in "$@"; do
			printf "$lib\n" >>../libraries
		done
	fi
fi

ORIG_GIT_DIR="$GIT_DIR"
ORIG_GIT_WORK_TREE="$GIT_WORK_TREE"
ORIG_GIT_INDEX_FILE="$GIT_INDEX_FILE"
GIT_WORK_TREE=.
export GIT_DIR GIT_WORK_TREE

GIT_INDEX_FILE="$(pwd)/../index"
export GIT_INDEX_FILE

libstr=
while read lib; do
	if test -z "$libstr"; then
		libstr="$lib"
	else
		libstr="$libstr, $lib"
	fi
done <../libraries

printf "Rewrite $package [$libstr]\n"

orig_commit=
orig_master=
if test -n "$notes" && git show-ref --verify --quiet "$ref"; then
	# Why doesn't this work here?  Interactively it does work.
	# git notes show "$ref" | read orig_commit orig_master
	git notes show "$ref" 2> /dev/null >../note
	read orig_commit orig_master <../note
fi

test -n "$time" && time=$TIME

if test -n "$orig_master" && test -z "$discard"; then
	printf "Already filtered up to $orig_commit.\n"
	git rev-list --reverse $ref |
	while read rev; do
		git notes show $rev | cut -d" " -f1 >>../revs
	done
	$time git rev-list --reverse master --not "$orig_master" \
		-- $(cat ../libraries) >>../revs 2>../time
else
	$time git rev-list --reverse master \
		-- $(cat ../libraries) >../revs 2>../time
fi

t=$(cat ../time)
n=$(wc -l <../revs)
i=0

if test -n "$discard" ||
   ! test "$n" -gt $(git rev-list "$ref" 2> /dev/null | wc -l)
then
	if test -z "$force"; then
		test -n "$time" && printf "No new commits found in $t.\n"
		printf "Already up-to-date.\n"
		exit 2
	else
		printf "Already up-to-date.  Forcing rewrite.\n"
		test -n "$tag" && git tag -d $(git tag | grep -e "^$package/")
	fi
elif test -n "$time"; then
	printf "$n new commits found in $t.\n"
fi

while read commit; do
	i=$(($i+1))
	printf "\rRewrite $commit ($i/$n)"

	git cat-file commit "$commit" >../commit ||
		die "Cannot read commit $commit"

	eval "$(set_ident <../commit)" ||
		die "setting author/committer failed for commit $commit"

	git read-tree --empty &&
	git ls-tree -r $commit -- $(cat ../libraries) |
	git update-index --index-info ||
		die "Could not update index"

	parentstr=
	if test -n "$tip"; then
		parentstr="-p $tip"
	fi

	sed -e '1,/^$/d' <../commit > ../message
	tip=$(git commit-tree $(git write-tree) $parentstr	< ../message) ||
		die "Could not write rewritten commit"

	if test -n "$notes"; then
		git notes add $force -m "$commit $(git rev-parse refs/heads/master)" \
			"$tip" 2> /dev/null
	fi

	if test -n "$tag"; then
		version=$(git show $parent:$package.el |
						 grep -o -E "^;; Version: [.0-9]+" |
						 head -n 1 | cut -c13-)
		# Only Drew Adams uses this.  He is also very set in his ways
		# and there is little sense trying to convince him otherwise.
		# Sometimes his version strings decrease (e.g from 22.0 to 0)
		# because he things they are for indication the minimal
		# supported Emacs version.	So we simply ignore the "version"
		# he provides and always use the "update number" as he only
		# ever increases that, I hope.
		update=$(git show $parent:$package.el |
						grep -o -E "^;;     Update #: [.0-9]+" |
						head -n 1 | cut -c18-)
		test -n "$update" && version="$update"
		# ^ End of insanity
		if test -n "$version" && ! git tag |
		   grep -E "^$(printf $package | sed 's/+/\\\\+/')/$version$" > /dev/null
		then
			printf " $version\n"
			case "$(git rev-parse --verify $package/$version 2> /dev/null)" in
			$tip) ;;
			*)    git tag $package/$version $tip;;
			esac
		fi
	fi
done <../revs
printf "\n"

git update-ref -m "filter-wiki: rewrite" "$ref" $tip ||
	die "Could not rewrite $ref"

cd "$orig_dir"
rm -rf "$tempdir"

trap - 0

unset GIT_DIR GIT_WORK_TREE GIT_INDEX_FILE
test -z "$ORIG_GIT_DIR" || {
	GIT_DIR="$ORIG_GIT_DIR" && export GIT_DIR
}
test -z "$ORIG_GIT_WORK_TREE" || {
	GIT_WORK_TREE="$ORIG_GIT_WORK_TREE" &&
	export GIT_WORK_TREE
}
test -z "$ORIG_GIT_INDEX_FILE" || {
	GIT_INDEX_FILE="$ORIG_GIT_INDEX_FILE" &&
	export GIT_INDEX_FILE
}

if [ "$(is_bare_repository)" = false ]; then
	git read-tree -u -m HEAD || exit
fi

exit 0

# Because that's what git-filter-branch uses.
# Local Variables:
# indent-tabs-mode: t
# End:
